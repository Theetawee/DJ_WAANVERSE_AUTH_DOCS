{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#dj-waanverse-auth-documentation","title":"Dj Waanverse Auth Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p><code>dj_waanverse_auth</code> is a state-of-the-art authentication package developed by Waanverse Labs Inc., meticulously designed to meet the modern security demands of both web and mobile applications. This comprehensive solution for REST authentication using JSON Web Tokens (JWT) ensures that your applications are secure, efficient, and scalable. It is the core authentication package used internally at Waanverse Labs, powering our diverse range of software products and services.</p>"},{"location":"#why-dj-waanverse-auth","title":"Why Dj Waanverse Auth?","text":"<p>In the rapidly evolving digital landscape, the need for secure and efficient authentication mechanisms has never been more critical. As Waanverse Labs Inc. expanded its portfolio of software services across various industries, we identified a gap in the market: a need for a robust, flexible, and enterprise-grade authentication solution that integrates seamlessly with Django and Django REST Framework.</p> <p>To address this, we developed <code>dj_waanverse_auth</code> as an internal tool to meet our own high standards of security and scalability. Our aim is to provide a package that is easy to integrate, highly configurable, and, most importantly, secure by default.</p>"},{"location":"#core-capabilities","title":"Core Capabilities","text":"<ul> <li> <p>\ud83d\udd11 JWT-Based Authentication System <code>dj_waanverse_auth</code> leverages JSON Web Tokens (JWT) for robust and scalable authentication. This method ensures that authentication tokens are securely encoded and can be easily transmitted between clients and servers, reducing the complexity of session management and enabling seamless integration across various platforms.</p> </li> <li> <p>\ud83d\udd52 Advanced Token Management (Rotation and Refresh)   Our package provides advanced token management capabilities, including token rotation and refresh mechanisms. This feature ensures that tokens remain valid for a defined period while allowing for automatic updates to improve security and user experience. It minimizes the risk of token theft by frequently rotating the keys used for encryption.</p> </li> <li> <p>\ud83c\udf6a Seamless Integration with Cookie-Based Authentication Flows <code>dj_waanverse_auth</code> integrates smoothly with cookie-based authentication systems, allowing for secure, session-based management of user credentials. This ensures compatibility with traditional web applications while maintaining the enhanced security provided by JWT.</p> </li> <li> <p>\ud83d\udd12 Enhanced Security Measures Including Multi-Factor Authentication (MFA)   Security is at the heart of <code>dj_waanverse_auth</code>. We provide built-in support for multi-factor authentication (MFA), which adds an extra layer of security by requiring users to provide multiple forms of verification. This significantly reduces the risk of unauthorized access, ensuring that your application is protected against a wide range of security threats.</p> </li> <li> <p>\ud83d\udd11 Comprehensive Account Functionality   The package includes a complete suite of account management features, from registration and password recovery to account deactivation and deletion. This comprehensive functionality is designed to simplify user management while maintaining high security standards.</p> </li> <li> <p>\ud83d\udcbc Enterprise Ready <code>dj_waanverse_auth</code> is designed to meet the needs of enterprise environments, offering scalability, configurability, and compliance with industry standards. Whether you're running a small application or a large-scale enterprise system, our package provides the flexibility and robustness required for any deployment scenario.</p> </li> <li> <p>\ud83d\udd75\ufe0f Battle-Tested   Developed and extensively used within Waanverse Labs Inc., <code>dj_waanverse_auth</code> has been thoroughly tested in real-world scenarios. Its reliability has been proven in demanding production environments, ensuring that it can handle even the most challenging authentication requirements.</p> </li> <li> <p>\ud83d\udd12 Private   Privacy is a priority. <code>dj_waanverse_auth</code> is designed to handle sensitive user information with the utmost care. Our package ensures that all data processing complies with strict privacy standards, protecting user data from unauthorized access and ensuring confidentiality.</p> </li> <li> <p>\ud83e\udde9 Customizable   Flexibility is key to meeting the diverse needs of our users. <code>dj_waanverse_auth</code> offers extensive customization options, allowing you to tailor the authentication system to your specific requirements. Whether it's modifying token lifetimes, customizing authentication flows, or integrating with third-party systems, our package provides the tools you need to build a solution that fits perfectly within your application ecosystem.</p> </li> </ul>"},{"location":"#about-waanverse-labs-inc","title":"About Waanverse Labs Inc.","text":"<p>Waanverse Labs Inc. is a leading software company based in Uganda, specializing in creating custom software products and services tailored to meet the unique needs of our clients. Our expertise extends across a variety of industries, including finance, healthcare, and more, providing cutting-edge solutions in web development, app development, and beyond. </p> <p>At Waanverse Labs, we are committed to delivering innovative, enterprise-level authentication and security solutions that help businesses thrive in the digital age. Our dedicated team of experts is passionate about driving technological advancements and ensuring our clients receive top-tier service and support.</p> <p>For more information, visit our website or contact us at support@waanverse.com.</p>"},{"location":"#development-team","title":"Development Team","text":"<p><code>dj_waanverse_auth</code> was brought to life and maintained by a team of highly skilled developers and security experts at Waanverse Labs Inc., led by our visionary leader, Khaotungkulmethee Pattawee Drake (tawee@waanverse.com). Our team combines years of experience in software engineering, app development, cybersecurity, and web development, ensuring that every aspect of this package is crafted with precision and care.</p>"},{"location":"#technology-stack","title":"Technology Stack","text":"<p>Dj Waanverse Auth leverages the power of several leading open-source technologies:</p> <ul> <li>Django</li> <li>Django REST framework</li> <li>PyOTP</li> <li>user-agents</li> <li>djangorestframework-simplejwt</li> </ul> <p>By building upon these established and well-maintained libraries, we ensure that Dj Waanverse Auth remains at the cutting edge of authentication technology while benefiting from the collective expertise of the open-source community.</p>"},{"location":"#the-future-of-dj-waanverse-auth","title":"The Future of Dj Waanverse Auth","text":"<p>We are committed to continuous development and improvement, ensuring that our users always have access to the latest features, updates, and security enhancements. Our roadmap includes the integration of more advanced security measures, such as adaptive authentication, machine learning-based anomaly detection, and seamless support for emerging authentication standards.</p>"},{"location":"#appreciation-for-open-source","title":"Appreciation for Open Source","text":"<p>At Waanverse Labs Inc., we believe in the power of the open-source community. <code>dj_waanverse_auth</code> is built on the shoulders of giants, leveraging some of the most trusted and well-maintained open-source projects in the industry. We are deeply grateful to the contributors of these projects for their invaluable work.</p>"},{"location":"#licensing-and-usage","title":"Licensing and Usage","text":"<p><code>dj_waanverse_auth</code> is a free-to-use package, reflecting our commitment to giving back to the developer community. However, it is also a restricted package, designed for use within the Waanverse Labs ecosystem and by approved partners. While we encourage exploration and contribution, we also maintain strict guidelines to ensure that our package is used responsibly and in accordance with our licensing terms.</p> <p>For more detailed information about implementation, usage, and advanced features, please refer to our comprehensive documentation suite.</p>"},{"location":"configuration/","title":"Configuration","text":"<p><code>dj_waanverse_auth</code> comes with a number of default settings. These can be overridden in your <code>settings.py</code> file using the <code>WAANVERSE_AUTH</code> dictionary as shown below.</p>"},{"location":"configuration/#example","title":"Example","text":"<pre><code>WAANVERSE_AUTH = {\n    ...\n    \"USER_CLAIM_SERIALIZER\": \"my-app.serializers.BasicAccountSerializer\",\n    ...\n}\n</code></pre>"},{"location":"configuration/#available-settings","title":"Available Settings","text":"<p>The <code>dj_waanverse_auth</code> package provides a flexible configuration system to tailor the authentication process to your application's needs. Below is a list of available settings, along with their descriptions:</p>"},{"location":"configuration/#auth_methods","title":"AUTH_METHODS","text":"<ul> <li>Type: <code>List[str]</code></li> <li>Default: <code>[\"username\"]</code></li> <li>Description: Defines the methods of authentication allowed. Allowed values are <code>username</code>, <code>email</code> and <code>phone_number</code>.</li> </ul> <p>Important</p> <p>Each value specified in the configuration must correspond to an existing field in the accounts model. For instance, if <code>AUTH_METHODS</code> includes <code>[\"username\", \"email\", \"phone_number\"]</code>, the accounts model must contain fields for <code>username</code>, <code>email</code>, and <code>phone_number</code>. Failure to do so will result in errors during authentication.</p> <p>Important</p> <p><code>username</code> and <code>email</code> are mandatory fields in the accounts model and email verification is required out of the box with no available setting to disable it.</p>"},{"location":"configuration/#mfa_recovery_codes_count","title":"MFA_RECOVERY_CODES_COUNT","text":"<ul> <li>Type: <code>int</code></li> <li>Default: <code>10</code></li> <li>Description: The number of multi-factor authentication (MFA) recovery codes generated for a user. These codes are used to regain access in case the primary MFA method is unavailable.</li> </ul>"},{"location":"configuration/#access_token_cookie","title":"ACCESS_TOKEN_COOKIE","text":"<ul> <li>Type: <code>str</code></li> <li>Default: <code>\"access_token\"</code></li> <li>Description: The name of the cookie used to store the JWT access token.</li> </ul>"},{"location":"configuration/#refresh_token_cookie","title":"REFRESH_TOKEN_COOKIE","text":"<ul> <li>Type: <code>str</code></li> <li>Default: <code>\"refresh_token\"</code></li> <li>Description: The name of the cookie used to store the JWT refresh token.</li> </ul>"},{"location":"configuration/#cookie_path","title":"COOKIE_PATH","text":"<ul> <li>Type: <code>str</code></li> <li>Default: <code>\"/\"</code></li> <li>Description: Specifies the path for which the cookies are valid. It can be set to a specific path if necessary.</li> </ul>"},{"location":"configuration/#cookie_domain","title":"COOKIE_DOMAIN","text":"<ul> <li>Type: <code>Optional[str]</code></li> <li>Default: <code>None</code></li> <li>Description: Specifies the domain for which the cookies are valid. If not set, the cookies are valid for the domain that issued the cookie.</li> </ul>"},{"location":"configuration/#cookie_samesite_policy","title":"COOKIE_SAMESITE_POLICY","text":"<ul> <li>Type: <code>str</code></li> <li>Default: <code>\"Lax\"</code></li> <li>Description: Defines the SameSite attribute of the cookie, which controls whether cookies are sent along with cross-site requests. The options are <code>\"Lax\"</code>, <code>\"Strict\"</code>, or <code>\"None\"</code>.</li> </ul>"},{"location":"configuration/#cookie_secure_flag","title":"COOKIE_SECURE_FLAG","text":"<ul> <li>Type: <code>bool</code></li> <li>Default: <code>False</code></li> <li>Description: If set to <code>True</code>, the cookie will only be sent over HTTPS connections.</li> </ul>"},{"location":"configuration/#cookie_http_only_flag","title":"COOKIE_HTTP_ONLY_FLAG","text":"<ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: If set to <code>True</code>, the cookie will not be accessible via JavaScript, providing additional security.</li> </ul>"},{"location":"configuration/#mfa_cookie_name","title":"MFA_COOKIE_NAME","text":"<ul> <li>Type: <code>str</code></li> <li>Default: <code>\"mfa_token\"</code></li> <li>Description: The name of the cookie used to store the MFA token.</li> </ul>"},{"location":"configuration/#mfa_cookie_duration","title":"MFA_COOKIE_DURATION","text":"<ul> <li>Type: <code>timedelta</code></li> <li>Default: <code>timedelta(minutes=2)</code></li> <li>Description: The duration for which the MFA cookie remains valid.</li> </ul> <p>Important</p> <p>The <code>MFA_COOKIE_DURATION</code> defines the time window a user has to submit their Multi-Factor Authentication (MFA) token. If this duration elapses, the user will need to log in again to proceed.</p>"},{"location":"configuration/#user_claim_serializer_class","title":"USER_CLAIM_SERIALIZER_CLASS","text":"<ul> <li>Type: <code>str</code></li> <li>Default: <code>\"dj_waanverse_auth.serializers.BasicAccountSerializer\"</code></li> <li>Description: Specifies the serializer class used for user claims in the JWT payload and response.</li> </ul>"},{"location":"configuration/#registration_serializer_class","title":"REGISTRATION_SERIALIZER_CLASS","text":"<ul> <li>Type: <code>str</code></li> <li>Default: <code>\"dj_waanverse_auth.serializers.SignupSerializer\"</code></li> <li>Description: Specifies the serializer class used for user registration.</li> </ul>"},{"location":"configuration/#username_min_length","title":"USERNAME_MIN_LENGTH","text":"<ul> <li>Type: <code>int</code></li> <li>Default: <code>4</code></li> <li>Description: The minimum length required for usernames.</li> </ul>"},{"location":"configuration/#disallowed_usernames","title":"DISALLOWED_USERNAMES","text":"<ul> <li>Type: <code>List[str]</code></li> <li>Default: <code>[\"waanverse\"]</code></li> <li>Description: A list of usernames that are not allowed during registration.</li> </ul>"},{"location":"configuration/#user_detail_serializer_class","title":"USER_DETAIL_SERIALIZER_CLASS","text":"<ul> <li>Type: <code>str</code></li> <li>Default: <code>\"dj_waanverse_auth.serializers.AccountSerializer\"</code></li> <li>Description: Specifies the serializer class used for user detail views.</li> </ul>"},{"location":"configuration/#enable_email_on_login","title":"ENABLE_EMAIL_ON_LOGIN","text":"<ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: If set to <code>True</code>, users will receive an email when them or someone else logs into their account.</li> </ul>"},{"location":"configuration/#confirmation_code_digits","title":"CONFIRMATION_CODE_DIGITS","text":"<ul> <li>Type: <code>int</code></li> <li>Default: <code>6</code></li> <li>Description: The number of digits in the email confirmation code.</li> </ul>"},{"location":"configuration/#platform_name","title":"PLATFORM_NAME","text":"<ul> <li>Type: <code>str</code></li> <li>Default: <code>\"Waanverse Auth\"</code></li> <li>Description: The name of the platform, used in email templates and other messaging contexts.</li> </ul>"},{"location":"configuration/#email_verification_code_duration","title":"EMAIL_VERIFICATION_CODE_DURATION","text":"<ul> <li>Type: <code>int</code></li> <li>Default: <code>10</code></li> <li>Description: The duration for which the email verification code remains valid in minutes.</li> </ul>"},{"location":"configuration/#mfa_issuer_name","title":"MFA_ISSUER_NAME","text":"<ul> <li>Type: <code>str</code></li> <li>Default: <code>\"Waanverse Labs Inc.\"</code></li> <li>Description: The name of the issuer displayed in MFA applications like Google Authenticator.</li> </ul>"},{"location":"configuration/#mfa_code_digits","title":"MFA_CODE_DIGITS","text":"<ul> <li>Type: <code>int</code></li> <li>Default: <code>6</code></li> <li>Description: The number of digits in the MFA code.</li> </ul>"},{"location":"configuration/#mfa_email_alerts_enabled","title":"MFA_EMAIL_ALERTS_ENABLED","text":"<ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: If set to <code>True</code>, users will receive email alerts for MFA-related activities like generation of recovery codes.</li> </ul>"},{"location":"configuration/#password_reset_code_duration","title":"PASSWORD_RESET_CODE_DURATION","text":"<ul> <li>Type: <code>timedelta</code></li> <li>Default: <code>timedelta(minutes=10)</code></li> <li>Description: The duration for which the password reset code remains valid.</li> </ul>"},{"location":"configuration/#password_reset_cooldown_period","title":"PASSWORD_RESET_COOLDOWN_PERIOD","text":"<ul> <li>Type: <code>timedelta</code></li> <li>Default: <code>timedelta(minutes=5)</code></li> <li>Description: The cooldown period after a password reset attempt, during which another attempt cannot be made.</li> </ul>"},{"location":"configuration/#password_reset_max_attempts","title":"PASSWORD_RESET_MAX_ATTEMPTS","text":"<ul> <li>Type: <code>int</code></li> <li>Default: <code>1</code></li> <li>Description: The maximum number of password reset attempts allowed before the system temporarily locks further attempts till the cooldown period.</li> </ul>"},{"location":"configuration/#email_threading_enabled","title":"EMAIL_THREADING_ENABLED","text":"<ul> <li>Type: <code>bool</code></li> <li>Default: <code>True</code></li> <li>Description: Determines whether email sending should use threading.</li> </ul> <p>Note</p> <p>When set to <code>True</code>, emails are sent using a separate thread, allowing for asynchronous sending and preventing delays in the main process. This is particularly useful in production environments where email sending might be a time-consuming operation.</p> <p>When set to <code>False</code>, email sending is done synchronously, which can be useful for testing purposes or in scenarios where immediate feedback is required, as emails are sent directly without the overhead of threading.</p> <ul> <li> <p>Impact:</p> <ul> <li>True: Emails are sent in a separate thread.</li> <li>False: Emails are sent synchronously, blocking the main process until sending is complete.</li> </ul> </li> </ul>"},{"location":"configuration/#use_admin_panel","title":"USE_ADMIN_PANEL","text":"<ul> <li>Type: <code>bool</code></li> <li>Default: <code>False</code></li> <li>Description: Determines whether models should be displayed in the Django admin panel. When set to <code>True</code>, models will be accessible and manageable through the admin interface. By default, this setting is disabled.</li> </ul>"},{"location":"configuration/#use_unfold","title":"USE_UNFOLD","text":"<ul> <li>Type: <code>bool</code></li> <li>Default: <code>False</code></li> <li>Description: Activates or deactivates the integration with Django Unfold. When set to <code>True</code>, the application will utilize Django Unfold for its intended functionalities. By default, this setting is disabled.</li> </ul>"},{"location":"endpoints/","title":"API Endpoints","text":"<p>Explanation of Messages</p> <p>The <code>Messages.___</code> placeholders, followed by an asterisk (<code>*</code>), represent predefined messages that are configured to be returned under various circumstances. These messages are informative and intended to be displayed to end users, providing them with relevant feedback based on the outcome of their requests.</p>"},{"location":"endpoints/#url-authentication-requirements","title":"URL Authentication Requirements","text":"Route Requires Authentication <code>/login</code> No <code>/token/refresh</code> Required <code>/resend/email</code> No <code>/verify/email</code> No <code>/signup</code> No <code>/me</code> Required <code>/mfa/activate</code> Required <code>/mfa/verify</code> Required <code>/mfa/status</code> Required <code>/mfa/regenerate-codes</code> Required <code>/mfa/deactivate</code> Required <code>/logout</code> Required <code>/mfa/login</code> Required <code>/password/reset</code> No <code>/password/reset/new</code> No"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<p>Before installing <code>dj_waanverse_auth</code>, ensure your environment meets the following requirements:</p> <ul> <li>Python 3.11+: The package is fully compatible with Python 3.11 and later versions, leveraging the latest features and improvements.</li> <li>Django 5.1+: Ensure you have Django 5.1 or a more recent version installed, as the package takes advantage of advanced features introduced in Django 5.x.</li> <li>Django REST Framework 3.15+: This package integrates seamlessly with Django REST Framework 3.15 and above, ensuring robust API management and security.</li> <li>SimpleJWT 5.3+: Required for comprehensive JWT management, including token generation, validation, and refresh mechanisms.</li> </ul> <p>Note</p> <p>While <code>dj_waanverse_auth</code> is designed to automatically install all necessary dependencies, it's advisable to manually verify the installation of these critical packages if you encounter any issues. Ensuring that your environment meets these requirements is essential for a smooth setup and operation.</p>"},{"location":"installation/#quickstart","title":"Quickstart","text":"<p>To get started with <code>dj_waanverse_auth</code>, follow these steps:</p>"},{"location":"installation/#1-install-the-package","title":"1. Install the Package","text":"<p>First, install the package using pip:</p> <pre><code>pip install dj-waanverse-auth\n</code></pre>"},{"location":"installation/#2-configure-django-settings","title":"2. Configure Django Settings","text":"<p>Assuming you have a Django project already set up, you need to make several updates to your settings.py file:</p> <p>a. SMTP Settings Set up SMTP settings for your project to enable email functionalities such as password resets and account verification. For detailed guidance, refer to the Django Email documentation</p> <p>b. Add to Installed Apps Include dj_waanverse_auth in your INSTALLED_APPS list:</p> <p><pre><code>INSTALLED_APPS = [\n    ...\n    'dj_waanverse_auth',\n    ...\n]\n</code></pre> c. Authentication Backends Add the custom authentication backend provided by dj_waanverse_auth:</p> <p><pre><code>AUTHENTICATION_BACKENDS = [\n    \"dj_waanverse_auth.backends.AuthBackend\",\n    \"django.contrib.auth.backends.ModelBackend\",\n]\n</code></pre> d. SimpleJWT Configuration Configure the JWT settings. The <code>SIMPLE_JWT</code> dictionary handles the lifetime of access and refresh tokens and cookie lifetimes. For additional configurations, refer to the SimpleJWT documentation .</p> <p><pre><code>from datetime import timedelta\n\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n}\n</code></pre> e. REST Framework Configuration Set dj_waanverse_auth as the default authentication class in Django REST Framework:</p> <p><pre><code>REST_FRAMEWORK = {\n    ...\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"dj_waanverse_auth.backends.JWTAuthentication\",\n    ),\n    ...\n}\n</code></pre> f. Middleware Configuration Add the CookiesHandlerMiddleware to your middleware stack:</p> <p><pre><code>MIDDLEWARE = [\n    ...\n    \"dj_waanverse_auth.middleware.CookiesHandlerMiddleware\",\n    ...\n]\n</code></pre> By following these steps, you'll have dj_waanverse_auth integrated into your Django project and ready to handle authentication using JWT.</p>"},{"location":"installation/#3-url-configuration","title":"3. URL Configuration","text":"<p>Additionally, add this to your project urls.py:</p> <pre><code>urlpatterns = [\n    ...\n    path('auth/', include('dj_waanverse_auth.urls')),\n    ...\n]\n</code></pre>"},{"location":"installation/#post-installation","title":"Post Installation","text":"<p>In your Django root execute the command below to create your database tables:</p> <pre><code>python manage.py migrate\n</code></pre>"},{"location":"endpoints/confirm_reset_password/","title":"Confirm Password Reset","text":""},{"location":"endpoints/confirm_reset_password/#verify-reset-password","title":"Verify Reset Password","text":"<ul> <li>Route: <code>POST /password/reset/new</code></li> <li>Description: Verifies the password reset code and sets a new password.</li> <li>Method: <code>POST</code></li> <li>Successful Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Content: <pre><code>{\n    \"detail\": \"Password reset successful\"\n}\n</code></pre></li> </ul> </li> <li>Bad Response:<ul> <li>Status Code: <code>400 Bad Request</code></li> <li>Content: <pre><code>{\n    \"detail\": \"Invalid reset code or password\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/login/","title":"Login Endpoint","text":"<ul> <li>Route: <code>/login</code></li> <li>Description: Authenticates a user and returns appropriate responses based on the account state.</li> </ul> <p>Note</p> <p>The response varies depending on the account status: - MFA Enabled: Returns a <code>mfa</code> key with the user ID. - Email Not Verified: Returns an <code>email</code> key with the user's email and a <code>msg</code> key with a message prompting email verification and a verification email is sent to the user's email address. - Email Verified, MFA Not Enabled: Returns <code>access_token</code> and <code>refresh_token</code> keys along with user details in the <code>user</code> key.</p> <ul> <li>Method: <code>POST</code></li> </ul>"},{"location":"endpoints/login/#request-body","title":"Request Body","text":"<ul> <li>Content-Type: <code>application/json</code></li> <li>Body: <pre><code>{\n    \"login_field\": \"string\",\n    \"password\": \"string\"\n}\n</code></pre></li> <li>Required Fields:<ul> <li><code>login_field</code> (string): The login field (one of those specified in <code>AUTHENTICATION_METHODS</code>) of the user attempting to log in.</li> <li><code>password</code> (string): The password associated with the <code>login_field</code>.</li> </ul> </li> </ul>"},{"location":"endpoints/login/#successful-responses","title":"Successful Responses","text":"<ul> <li>Status Code: <code>200 OK</code></li> <li>Content (MFA Enabled): <pre><code>{\n    \"mfa\": \"user_id\"\n}\n</code></pre></li> <li>Content (Email Not Verified): <pre><code>{\n    \"email\": \"user@example.com\",\n    \"msg\": \"[Messages.status_unverified]*\"\n}\n</code></pre></li> <li>Content (Email Verified, MFA Not Enabled): <pre><code>{\n    \"access_token\": \"string\",\n    \"refresh_token\": \"string\",\n    \"user\": {\n        \"id\": \"integer\",\n        \"username\": \"string\"\n    }\n}\n</code></pre></li> </ul>"},{"location":"endpoints/login/#bad-responses","title":"Bad Responses","text":"<ul> <li>Status Code: <code>401 Unauthorized</code></li> <li>Content: <pre><code>{\n    \"detail\": \"Incorrect authentication credentials.\",\n    \"code\": \"authentication_failed\",\n    \"msg\": \"[Messages.no_account]*\"\n}\n</code></pre></li> </ul>"},{"location":"endpoints/login/#explanation-of-responses","title":"Explanation of Responses","text":"<ol> <li> <p>MFA Enabled: If multi-factor authentication (MFA) is enabled, the response will include the user ID in the <code>mfa</code> key. The MFA cookie, containing the user ID, is automatically set in the response headers.</p> </li> <li> <p>Email Not Verified: If the user's email is not verified, the response includes the user's email in the <code>email</code> key and a message prompting email verification in the <code>msg</code> key. A verification email containing the code is automatically sent to the user's email address.</p> </li> <li> <p>Email Verified, MFA Not Enabled: If the email is verified and MFA is not enabled, the response includes access and refresh tokens in the respective keys, along with user details in the <code>user</code> key as defined by the <code>USER_CLAIM_SERIALIZER</code>. Authentication cookies are automatically set in the response headers.</p> </li> <li> <p>Cookies: Authentication cookies, such as those for session management and MFA, are automatically set in the response headers and do not appear in the response body. These cookies are used for authorization in web applications.</p> </li> <li> <p>Authorization:</p> <ul> <li>Web Applications: Authorization is managed through cookies, which are automatically set and read by the browser.</li> <li>Mobile Applications: Authorization is handled via the <code>Authorization</code> Bearer header, where the access token must be included. The refresh token should be securely stored by the client to refresh the access token when necessary.</li> </ul> </li> </ol>"},{"location":"endpoints/logout/","title":"User Logout","text":""},{"location":"endpoints/logout/#logout","title":"Logout","text":"<ul> <li>Route: <code>POST /logout</code></li> <li>Description: Logs out the user and invalidates the session.</li> <li>Method: <code>POST</code></li> <li>Successful Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Content: <pre><code>{\n    \"detail\": \"Logged out successfully\"\n}\n</code></pre></li> </ul> </li> <li>Bad Response:<ul> <li>Status Code: <code>401 Unauthorized</code></li> <li>Content: <pre><code>{\n    \"detail\": \"Invalid or expired token\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/refresh_token/","title":"Refresh Token Endpoint","text":"<ul> <li>Route: <code>/token/refresh</code></li> <li> <p>Description: Refreshes the access token using the refresh token provided in the request body or via cookies.</p> </li> <li> <p>Method: <code>POST</code></p> </li> </ul>"},{"location":"endpoints/refresh_token/#request-body","title":"Request Body","text":"<ul> <li>Content-Type: <code>application/json</code> (if using a request body)</li> <li>Body: <pre><code>{\n    \"refresh_token\": \"string\"\n}\n</code></pre></li> <li>Fields:<ul> <li><code>refresh_token</code> (string): The refresh token used to obtain a new access token. This is required for applications but optional for websites where the token is handled via cookies.</li> </ul> </li> </ul>"},{"location":"endpoints/refresh_token/#successful-response","title":"Successful Response","text":"<ul> <li>Status Code: <code>200 OK</code></li> <li>Content: <pre><code>{\n    \"access_token\": \"string\"\n}\n</code></pre></li> <li>Explanation: Returns a new access token and automatically sets it in the response cookies.</li> </ul>"},{"location":"endpoints/refresh_token/#bad-responses","title":"Bad Responses","text":"<ul> <li>Status Code: <code>401 Unauthorized</code></li> <li>Content: <pre><code>{\n    \"msg\": \"[Messages.token_error]*\"\n}\n</code></pre></li> <li>Explanation: Indicates that the provided refresh token is invalid or has expired.</li> </ul>"},{"location":"endpoints/refresh_token/#notes","title":"Notes","text":"<ul> <li>For web applications, the refresh token is managed via cookies and does not need to be included in the request body.</li> <li>For mobile or other applications, include the refresh token in the request body to obtain a new access token.</li> </ul>"},{"location":"endpoints/resend_verification_email/","title":"Resend Verification Email","text":""},{"location":"endpoints/resend_verification_email/#resend-verification-email","title":"Resend Verification Email","text":"<ul> <li>Route: <code>/resend/email</code></li> <li>Description: Resend the verification email to the user for email confirmation.</li> <li>Method: <code>POST</code></li> <li> <p>Request Body:</p> <ul> <li>Content: <pre><code>{\n    \"email\": \"user@example.com\"\n}\n</code></pre></li> <li>Description: Requires the user's email address in the request body to resend the verification email.</li> </ul> </li> <li> <p>Successful Response:</p> <ul> <li>Status Code: <code>200 OK</code></li> <li>Content: <pre><code>{\n    \"email\": \"user@example.com\",\n    \"msg\": \"[Messages.email_sent]*\"\n}\n</code></pre></li> <li>Description: Indicates that the verification email was successfully sent to the provided email address.</li> </ul> </li> <li> <p>Bad Responses:</p> <ul> <li>Status Code: <code>400 Bad Request</code></li> <li>Content: <pre><code>{\n    \"email\": [\"[Messages.no_account]*\"]\n}\n</code></pre></li> <li> <p>Description: Returned when no account is associated with the provided email.</p> </li> <li> <p>Status Code: <code>400 Bad Request</code></p> </li> <li>Content: <pre><code>{\n    \"msg\": [\"[Messages.email_error]*\"]\n}\n</code></pre></li> <li>Description: Returned if there is an internal error or the email could not be sent.</li> </ul> </li> </ul>"},{"location":"endpoints/reset_password/","title":"Reset Password","text":""},{"location":"endpoints/reset_password/#reset-password","title":"Reset Password","text":"<ul> <li>Route: <code>POST /password/reset</code></li> <li>Description: Initiates the password reset process for the user.</li> <li>Method: <code>POST</code></li> <li>Successful Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Content: <pre><code>{\n    \"detail\": \"Password reset email sent\"\n}\n</code></pre></li> </ul> </li> <li>Bad Response:<ul> <li>Status Code: <code>400 Bad Request</code></li> <li>Content: <pre><code>{\n    \"detail\": \"Invalid email address or user not found\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/signup/","title":"User Signup","text":""},{"location":"endpoints/signup/#signup","title":"Signup","text":"<ul> <li>Route: <code>POST /signup</code></li> <li>Description: Registers a new user account.</li> <li>Method: <code>POST</code></li> <li>Successful Response:<ul> <li>Status Code: <code>201 Created</code></li> <li>Content: <pre><code>{\n    \"id\": \"integer\",\n    \"username\": \"string\",\n    \"email\": \"string\"\n}\n</code></pre></li> </ul> </li> <li>Bad Response:<ul> <li>Status Code: <code>400 Bad Request</code></li> <li>Content: <pre><code>{\n    \"detail\": \"User already exists or invalid data\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/userinfo/","title":"User Info","text":""},{"location":"endpoints/userinfo/#user-info","title":"User Info","text":"<ul> <li>Route: <code>GET /me</code></li> <li>Description: Retrieves information about the currently authenticated user.</li> <li>Method: <code>GET</code></li> <li>Successful Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Content: <pre><code>{\n    \"id\": \"integer\",\n    \"username\": \"string\",\n    \"email\": \"string\"\n}\n</code></pre></li> </ul> </li> <li>Bad Response:<ul> <li>Status Code: <code>401 Unauthorized</code></li> <li>Content: <pre><code>{\n    \"detail\": \"Authentication credentials were not provided\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/verify_email/","title":"Verify Email","text":"<ul> <li>Route: <code>/verify/email</code></li> <li>Description: Verifies the user's email address using the provided verification code. The code is sent to the user's email address upon registration or request.</li> <li>Method: <code>POST</code></li> <li> <p>Request Body:</p> <ul> <li>Content-Type: <code>application/json</code></li> <li>Required Fields: <pre><code>{\n    \"email\": \"user@example.com\",\n    \"code\": \"123456\"\n}\n</code></pre><ul> <li><code>email</code>: The email address of the user that needs to be verified.</li> <li><code>code</code>: The verification code received by the user via email.</li> </ul> </li> </ul> </li> <li> <p>Successful Response:</p> <ul> <li>Status Code: <code>200 OK</code></li> <li>Content: <pre><code>{\n    \"detail\": \"Email verified\"\n}\n</code></pre></li> </ul> </li> <li> <p>Bad Response:</p> <ul> <li>Status Code: <code>400 Bad Request</code></li> <li> <p>Content: <pre><code>{\n    \"detail\": \"Invalid verification code\"\n}\n</code></pre></p> </li> <li> <p>Status Code: <code>400 Bad Request</code></p> </li> <li>Content: <pre><code>{\n    \"detail\": \"Email not found\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/mfa/deactivate/","title":"Deactivate MFA","text":""},{"location":"endpoints/mfa/deactivate/#deactivate-mfa","title":"Deactivate MFA","text":"<ul> <li>Route: <code>POST /mfa/deactivate</code></li> <li>Description: Deactivates MFA for the user.</li> <li>Method: <code>POST</code></li> <li>Successful Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Content: <pre><code>{\n    \"detail\": \"MFA deactivated\"\n}\n</code></pre></li> </ul> </li> <li>Bad Response:<ul> <li>Status Code: <code>400 Bad Request</code></li> <li>Content: <pre><code>{\n    \"detail\": \"MFA deactivation failed\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/mfa/enable/","title":"Enable MFA","text":""},{"location":"endpoints/mfa/enable/#enable-mfa","title":"Enable MFA","text":"<ul> <li>Route: <code>POST /mfa/activate</code></li> <li>Description: Activates multi-factor authentication (MFA) for the user.</li> <li>Method: <code>POST</code></li> <li>Successful Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Content: <pre><code>{\n    \"detail\": \"MFA activated\"\n}\n</code></pre></li> </ul> </li> <li>Bad Response:<ul> <li>Status Code: <code>400 Bad Request</code></li> <li>Content: <pre><code>{\n    \"detail\": \"MFA activation failed\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/mfa/generate_code/","title":"Generate MFA Recovery Codes","text":""},{"location":"endpoints/mfa/generate_code/#regenerate-recovery-codes","title":"Regenerate Recovery Codes","text":"<ul> <li>Route: <code>POST /mfa/regenerate-codes</code></li> <li>Description: Generates new MFA recovery codes for the user.</li> <li>Method: <code>POST</code></li> <li>Successful Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Content: <pre><code>{\n  \"recovery_codes\": [\"string\", \"string\", ...]\n}\n</code></pre></li> </ul> </li> <li>Bad Response:<ul> <li>Status Code: <code>400 Bad Request</code></li> <li>Content: <pre><code>{\n    \"detail\": \"Failed to regenerate recovery codes\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/mfa/login/","title":"MFA Login","text":""},{"location":"endpoints/mfa/login/#mfa-login","title":"MFA Login","text":"<ul> <li>Route: <code>POST /mfa/login</code></li> <li>Description: Logs in a user using MFA.</li> <li>Method: <code>POST</code></li> <li>Successful Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Content: <pre><code>{\n    \"access\": \"string\",\n    \"refresh\": \"string\"\n}\n</code></pre></li> </ul> </li> <li>Bad Response:<ul> <li>Status Code: <code>401 Unauthorized</code></li> <li>Content: <pre><code>{\n    \"detail\": \"Invalid MFA code or credentials\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/mfa/status/","title":"MFA Status","text":""},{"location":"endpoints/mfa/status/#mfa-status","title":"MFA Status","text":"<ul> <li>Route: <code>GET /mfa/status</code></li> <li>Description: Checks the current status of MFA for the user.</li> <li>Method: <code>GET</code></li> <li>Successful Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Content: <pre><code>{\n    \"mfa_enabled\": true\n}\n</code></pre></li> </ul> </li> <li>Bad Response:<ul> <li>Status Code: <code>401 Unauthorized</code></li> <li>Content: <pre><code>{\n    \"detail\": \"Authentication credentials were not provided\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"endpoints/mfa/verify/","title":"Verify MFA","text":""},{"location":"endpoints/mfa/verify/#verify-mfa","title":"Verify MFA","text":"<ul> <li>Route: <code>POST /mfa/verify</code></li> <li>Description: Verifies the MFA code provided by the user.</li> <li>Method: <code>POST</code></li> <li>Successful Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Content: <pre><code>{\n    \"detail\": \"MFA verified\"\n}\n</code></pre></li> </ul> </li> <li>Bad Response:<ul> <li>Status Code: <code>400 Bad Request</code></li> <li>Content: <pre><code>{\n    \"detail\": \"Invalid MFA code\"\n}\n</code></pre></li> </ul> </li> </ul>"}]}